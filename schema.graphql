schema {
  query: Query
  mutation: Mutation
}

interface _baseEntity {
  id: String
  entityType: String
  createdBy: String
  createdDate: Int
  lastUpdatedBy: String
  lastUpdatedDate: Int
  gsi1: String
  gsi2: String
}

enum ROLE {
  TUTOR
  STUDENT
}

type User implements _baseEntity @aws_cognito_user_pools {
  id: String
  entityType: String
  name: String
  role: ROLE
  createdBy: String
  createdDate: Int
  lastUpdatedBy: String
  lastUpdatedDate: Int
  gsi1: String
  gsi2: String
  courses: [Course]
  courseSubscriptions(entityType: String): [CourseSubscription]
}

type Course implements _baseEntity @aws_cognito_user_pools {
  id: String
  entityType: String
  name: String
  description: String
  authorId: String
  author: User
  createdBy: String
  createdDate: Int
  lastUpdatedBy: String
  lastUpdatedDate: Int
  gsi1: String # Parent id. User is the parent of course
  gsi2: String
  comments(entityType: String): [Comment]
  courseVideos(entityType: String): [CourseVideo]
  courseSubscriptions(entityType: String): [CourseSubscription]
}

type CourseVideo implements _baseEntity @aws_cognito_user_pools {
  id: String
  entityType: String
  name: String
  description: String
  videoUrl: String
  courseId: String
  course: Course
  createdBy: String
  createdDate: Int
  lastUpdatedBy: String
  lastUpdatedDate: Int
  gsi1: String # Parent id. Course is the parent of CourseVideo
  gsi2: String
}

type CourseSubscription implements _baseEntity @aws_cognito_user_pools {
  id: String
  entityType: String
  courseId: String
  userId: String
  course: Course
  user: User
  createdBy: String
  createdDate: Int
  lastUpdatedBy: String
  lastUpdatedDate: Int
  gsi1: String # Parent id. User is the parent of CourseSubscription
  gsi2: String # Course ID. list the data course
}

type Comment implements _baseEntity @aws_cognito_user_pools {
  id: String
  entityType: String
  comment: String
  parentId: String # Parent id. will be the course and for reply this will be the comment id
  parent: _baseEntity
  userId: String
  user: User
  comments(entityType: String): [Comment]
  createdBy: String
  createdDate: Int
  lastUpdatedBy: String
  lastUpdatedDate: Int
  gsi1: String # Parent id. will be the course and for reply this will be the comment id
  gsi2: String
}

input CourseInput {
  id: String
  entityType: String
  name: String
  description: String
  authorId: String
}

input CourseVideoInput {
  id: String
  entityType: String
  name: String
  description: String
  videoUrl: String
  courseId: String
}

type Query {
  getCoursesByAuthor(entityType: String, id: String): [Course]
  getCourses(entityType: String): [Course]
  getCoursesById(entityType: String, id: String): Course

  getUserById(entityType: String, id: String): User
}
type Mutation {
  createCourse(course: CourseInput!): Course
  deleteCourse(id: String!): Course

  createCourseVideo(courseVideo: CourseVideoInput!): CourseVideo
  deleteCourseVideo(id: String!): CourseVideo

  subscribeCourse(courseId: String!): CourseSubscription

  addComments(parentId: String, comment: String): Comment
}
