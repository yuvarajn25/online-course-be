CognitoUserPool:
  Type: "AWS::Cognito::UserPool"
  Properties:
    MfaConfiguration: OFF
    AutoVerifiedAttributes:
      - email
    UserPoolName: online-course
    UsernameAttributes:
      - email
    Policies:
      PasswordPolicy:
        MinimumLength: 6
        RequireLowercase: False
        RequireNumbers: False
        RequireSymbols: False
        RequireUppercase: False
    Schema:
      - AttributeDataType: String
        Name: "role"
CognitoUserPoolClient:
  Type: "AWS::Cognito::UserPoolClient"
  Properties:
    ClientName: online-course-client
    GenerateSecret: False
    UserPoolId:
      Ref: CognitoUserPool

IdentityPool:
  Type: "AWS::Cognito::IdentityPool"
  Properties:
    IdentityPoolName: online-course-identity
    AllowUnauthenticatedIdentities: false
    CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoUserPoolClient
        ProviderName:
          "Fn::GetAtt": [CognitoUserPool, ProviderName]
AuthenticationTrust:
  Type: "AWS::IAM::Role"
  Properties:
    RoleName: "AuthenticationTrust"
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action: "sts:AssumeRoleWithWebIdentity"
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                - !Ref IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr:
                - authenticated
IdentityPoolRoleAttachment:
  Type: AWS::Cognito::IdentityPoolRoleAttachment
  Properties:
    IdentityPoolId: !Ref IdentityPool
    Roles:
      "authenticated": !GetAtt AuthenticationTrust.Arn
CognitoUserTutor:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Tutor login group"
    GroupName: "Tutor"
    UserPoolId:
      Ref: CognitoUserPool
CognitoUserStudent:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Student login group"
    GroupName: "Student"
    UserPoolId:
      Ref: CognitoUserPool
DynamoTable:
  Type: "AWS::DynamoDB::Table"
  Properties:
    TableName: "onlineCourse"
    KeySchema:
      - AttributeName: entityType
        KeyType: HASH
      - AttributeName: id
        KeyType: RANGE
    AttributeDefinitions:
      - AttributeName: entityType
        AttributeType: S
      - AttributeName: id
        AttributeType: S
      - AttributeName: gsi1
        AttributeType: S
      - AttributeName: gsi2
        AttributeType: S
    ProvisionedThroughput:
      ReadCapacityUnits: 5
      WriteCapacityUnits: 5
    StreamSpecification:
      StreamViewType: "NEW_IMAGE"
    GlobalSecondaryIndexes:
      - IndexName: entity-gsi1-index
        KeySchema:
          - AttributeName: entityType
            KeyType: HASH
          - AttributeName: gsi1
            KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
      - IndexName: entity-gsi2-index
        KeySchema:
          - AttributeName: entityType
            KeyType: HASH
          - AttributeName: gsi2
            KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

AppSyncDynamoServiceRole:
  Type: "AWS::IAM::Role"
  Properties:
    RoleName: "Dynamo-OnlineCourse"
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "appsync.amazonaws.com"
          Action:
            - "sts:AssumeRole"
    Policies:
      - PolicyName: "Dynamo-OnlineCourse-Policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource:
                - "Fn::Join":
                    - ":"
                    - - "arn:aws:dynamodb"
                      - ${self:provider.region}
                      - ${self:custom.accountId}
                      - "table/*"
AppSyncLambdaServiceRole:
  Type: "AWS::IAM::Role"
  Properties:
    RoleName: "Lambda-OnlineCourse"
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "appsync.amazonaws.com"
          Action:
            - "sts:AssumeRole"
    Policies:
      - PolicyName: "Lambda-OnlineCourse-Policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "lambda:invokeFunction"
              Resource:
                - "Fn::Join":
                    - ":"
                    - - "arn:aws:lambda"
                      - ${self:provider.region}
                      - ${self:custom.accountId}
                      - "function:*"
S3Bucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: "online-course-content"
    CorsConfiguration:
      CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - HEAD
            - GET
            - POST
            - PUT
            - DELETE
          AllowedOrigins:
            - "*"
          ExposedHeaders:
            - Date
            - ETag
          Id: myCORSRuleId1
          MaxAge: 3600
S3BucketPolicy:
  Type: "AWS::S3::BucketPolicy"
  Properties:
    Bucket: !Ref S3Bucket
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal: "*"
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::online-course-content/public/*
            - !Join [
                "",
                [
                  "arn:aws:s3:::online-course-content/protected/",
                  "$",
                  "{cognito-identity.amazonaws.com:sub}/*",
                ],
              ]
            - !Join [
                "",
                [
                  "arn:aws:s3:::online-course-content/private/",
                  "$",
                  "{cognito-identity.amazonaws.com:sub}/*",
                ],
              ]
        - Effect: Allow
          Principal: "*"
          Action: s3:PutObject
          Resource: arn:aws:s3:::online-course-content/uploads/*
        - Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource: arn:aws:s3:::online-course-content/protected/*
        - Effect: Allow
          Principal: "*"
          Action: s3:ListBucket
          Resource: arn:aws:s3:::online-course-content
          Condition:
            StringLike:
              s3:prefix:
                - public/
                - public/*
                - protected/
                - protected/*
                - !Join [
                    "",
                    ["private/", "$", "{cognito-identity.amazonaws.com:sub}/"],
                  ]
                - !Join [
                    "",
                    ["private/", "$", "{cognito-identity.amazonaws.com:sub}/*"],
                  ]
