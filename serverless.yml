service: online-course
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  profile: ${opt:profile}
  region: us-east-1
  environment:
    REGION: ${self:provider.region}
    ACCOUNT_ID: ${self:custom.accountId}
    USER_POOL_ID: ${self:custom.userPoolId}
    USER_POOL_CLIENT_ID: ${self:custom.userPoolClientId}
  iamRoleStatements: ${file(serverless/iamRoleStatements.yml):iamRoleStatements}
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
plugins:
  - serverless-appsync-plugin
  - serverless-pseudo-parameters
  - serverless-webpack
functions:
  hello:
    handler: handler.hello
  customMessage:
    handler: lambdas/customMessage.handler
    events:
      - cognitoUserPool:
          pool: online-course
          trigger: CustomMessage
          existing: true
  postAuthentication:
    handler: lambdas/postAuthentication.handler
    events:
      - cognitoUserPool:
          pool: online-course
          trigger: PostAuthentication
          existing: true
  mutations:
    handler: lambdas/mutations.handler
    timeout: 300
    memorySize: 1536
    runtime: nodejs12.x
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources: "${file(serverless/resources.yml)}"
custom:
  accountId: "#{AWS::AccountId}"
  userPoolId: !Ref CognitoUserPool
  userPoolClientId: !Ref CognitoUserPoolClient
  appSync: ${file(serverless/appsync.yml)}
  webpack:
    webpackConfig: "webpack.config.js" # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: "yarn" # Packager that will be used to package your external modules
