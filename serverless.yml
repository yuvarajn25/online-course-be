service: online-course
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  profile: ${opt:profile}
  region: us-east-1
  environment:
    REGION: ${self:provider.region}
    ACCOUNT_ID: ${self:custom.accountId}
    USER_POOL_ID: ${self:custom.userPoolId}
    USER_POOL_CLIENT_ID: ${self:custom.userPoolClientId}
    SMTP_HOST: "in-v3.mailjet.com"
    SMTP_USER: "1c14a5d20b46af8d8850b15f5067f6a4"
    SMTP_PASS: "1a03c488f628595d1d19e836ef68b10c"
  iamRoleStatements: ${file(serverless/iamRoleStatements.yml):iamRoleStatements}
plugins:
  - serverless-appsync-plugin
  - serverless-pseudo-parameters
  - serverless-webpack
functions:
  customMessage:
    handler: lambdas/customMessage.handler
    events:
      - cognitoUserPool:
          pool: online-course
          trigger: CustomMessage
          existing: true
  postAuthentication:
    handler: lambdas/postAuthentication.handler
    events:
      - cognitoUserPool:
          pool: online-course
          trigger: PostAuthentication
          existing: true
  mutations:
    handler: lambdas/mutations.handler
    timeout: 300
    memorySize: 1536
    runtime: nodejs12.x
  dynamoStream:
    handler: lambdas/dynamoStream.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DynamoTable, StreamArn]

resources:
  Resources: "${file(serverless/resources.yml)}"
custom:
  accountId: "#{AWS::AccountId}"
  userPoolId: !Ref CognitoUserPool
  userPoolClientId: !Ref CognitoUserPoolClient
  appSync: ${file(serverless/appsync.yml)}
  webpack:
    webpackConfig: "webpack.config.js" # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: "yarn" # Packager that will be used to package your external modules
